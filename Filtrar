#crear .txt a partir de una lista
with open('links_prueba.txt', 'w') as archivo:
    for i in ftp:
        archivo.write(i + '\n')

#mover columnas. reasignar index
df.columns #para ver nuestras columnas
df = df.reindex(columns=[columna1,columna2,columna3])

#eliminar repeticiones de una serie
list(set(df['food']))

#crear columnas vacias necesitas numpy o pandas
df['col vacia'] = np.nan
df['col vacia'] = pd.Series()
df['col vacia'] = ""


#separar columna por cierto caracter
df['Additional information:'].str.split(pat='\n')

#eliminar fila de df
df = df.drop(df.index[[0]])

#generar una lista de numeros con un txt
with open('lista.txt') as f:
    contenido = f.read()
data = contenido.split()

#agregar un valor a una lista
lista.append('')#agrega un vacio al final de la lista
lista.insert(index,'valor u otra lista') #agrega en el index que quieras

#es un numero? y de paso veo si el largo es 1
if (any(chr.isdigit() for chr in a[0])==True) and (len(a)==1):

#eliminar fila de df
df = df.drop(df.index[[0]])

#mover elemento de una lista
list1.insert(new_index, item) 'item puede ser list1[index]'
list1.remove(item) 'item puede ser list1[index]'

#BASH generar un FASTA a partir de un csv, cambia las ',' por una nueva linea y en este caso le pedi que cada linea que inica en sp, le agregue el '>' de FASTA
$ cat ARCHIVO | tr ',' '\n' | sed 's/^sp/>sp/'

#RANGE no incluye al segundo argumento, es -1, por lo tanto si queres llegar al 2050 tenes que poner 2051
x_pred = pd.Series ([i for i in range (1880,2051)])

#EDITAR UNA PALABRA QUE SE REPITE MUCHAS VECES
TENGO QUE SELECCIONAR LA PALABRA Y TOCAR CTRL + D, ESO ME VA SELECCIONANDO LAS SIGUIENTES. 

#indicar que una columna es de tiempo. fijarse si tengo barras o guiones, y si tengo horas min seg o no.
df['Datetime'] = pd.to_datetime(df['Datetime'], format="%m/%d/%Y, %H:%M:%S")

#resetear los index, para volver a tenerlos. sirve si en vez de numeros en el index habias asignado nombres. tene genera una columna con esos nombres y pone numeros de index
df = df.reset_index()

#filtro y me quedo con ciertas caracteristicas concatenadas
df_heat = df[(df['ap_lo']<=df['ap_hi']) &
    (df['height'] >= df['height'].quantile(0.025))&
    (df['height'] <= df['height'].quantile(0.975))&
    (df['weight'] >= df['weight'].quantile(0.025))&
    (df['weight'] <= df['weight'].quantile(0.975))
    ]

#todos los valores diferentes a 1, pasan a ser 1, excepto el 0
df['column'] = df['column'].apply(lambda x : 0 if x == 1 else 1

#Tengo un df con columna "eduation" y lo filtro por VALUES
values=["Bachelors","Masters","Doctorate"]
filtered_df = df[df.education.isin(values)]
filtered_df

#quiero el porcentaje de gente con cierta caracteristica. education es la columna, value_counts te cuenta las repeticiones y normalize hace un porcentaje.
df["education"].value_counts(normalize=True)

#selecciona por etiquetas una serie. de paso suma el resultado de las etiquetas.
s[["Bachelors","Masters","Doctorate"]].sum()

#filtro al df por cierto dato.
a = df[df['salary'] == '<=50K']
#tambien puedo hacer:
a = df["hours-per-week"] == 1
b = df[a]

#union de condiciones
planets[planets.year.isin([2008, 2009]) & planets.mass.isnull()]

#sumar los valores de la serie, de ciertos index. 
suma = e.loc["Bachelors"] + e.loc["Masters"] + e.loc["Doctorate"]

#agregar una columna basada en una condicion de otra columna. pone '1' si cumple la condicion y '0' si no la cumple, pero podes poner lo que vos quieras.
df['overweight'] = np.where(df['bmi']>25,'1','0')

#cambiar tipo de dato en la columna de un df
a = df['bmi'].astype(float)
df['bmi'] = a
